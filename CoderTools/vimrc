set nocompatible
set ignorecase
syntax on
set number

" 禁止折行
set nowrap

" 支持命令行内进行智能补全
set wildmenu

autocmd BufWritePost $MYVIMRC source $MYVIMRC

let mapleader=";"
" 退出
nmap <Leader>q :q<CR>
" 保存
nmap <Leader>w :w<CR>
" 复制内容到系统粘贴板
vnoremap <Leader>y "+y
" 从系统粘贴板复制内容到vi中
nmap <Leader>p "+p

" isWindowsPC -- 判断系统
let g:isWindowsPC=0
if (has('win32') || has('win64') || has('win95') || has('win16'))
	let g:isWindowsPC=1
else
	let g:isWindowsPC=0
endif

" GUI 默认最大化
if has("gui_running")
  " GUI is running or is about to start.
  " Maximize gvim window (for an alternative on Windows, see simalt below).
  set lines=999 columns=999
else
  " This is console Vim.
  if exists("+lines")
    set lines=50
  endif
  if exists("+columns")
    set columns=100
  endif
endif

"高亮选中行
set cursorline
"set cursorcolumn

filetype off
"设置Vundle初始化和相关的路径runtime path
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"另外一种，可以指定vundle安装的路径
"call vundle#bgin('~/.vim/bundle/')
"1. 在Github上vim-scripts用户下的仓库,只需要写出repos（仓库）名称 
"2. 在Github其他用户下的repos, 需要写出”用户名/repos名” 
"3. 不在Github上的插件，需要写出git全路径

"让vundle管理插件版本
Plugin 'VundleVim/Vundle.vim'

" YouCompleteMe -- 代码补全插件
Plugin 'git@github.com:Valloric/YouCompleteMe.git'

"文件导航NERDTree
Plugin 'git@github.com:scrooloose/nerdtree.git'

" vim-color-solarized --- 配色方案插件
Plugin 'git@github.com:altercation/vim-colors-solarized.git'

" tagbar --- 生成函数和变量列表的插件
Plugin 'git@github.com:majutsushi/tagbar.git'

" fugitive --- git plugin
Plugin 'git@github.com:tpope/vim-fugitive.git'

" commentary --- 代码注释插件
Plugin 'git@github.com:tpope/vim-commentary.git'

" syntastic --- 语法检查插件
Plugin 'git@github.com:vim-syntastic/syntastic.git'

" ultisnips -- 代码片段工具
" Plugin 'git@github.com:SirVer/ultisnips.git'
Plugin 'honza/vim-snippets'

" ctrip -- 目录文件搜索插件
" Plugin 'git@github.com:kien/ctrlp.vim.git'

" LeaderF -- 模糊文件查找插件
Plugin 'git@github.com:Yggdroot/LeaderF.git'

" delimitMate -- 自动补全括号插件
Plugin 'git@github.com:Raimondi/delimitMate.git'

" supertab -- tab键功能插件
Plugin 'git@github.com:ervandew/supertab.git'

" vim-surrond --- 替换文本的'外套'
Plugin 'git@github.com:tpope/vim-surround.git'

" buferexplorer -- 浏览buffer的插件
Plugin 'git@github.com:vim-scripts/bufexplorer.zip.git'

" a -- 切换cpp和.h文件的插件
Plugin 'git@github.com:vim-scripts/a.vim.git'

" clang_complete -- 代码补全插件
"Plugin 'git@github.com:Rip-Rip/clang_complete.git'

" neocomplcache -- 关键字补全插件
"Plugin 'git@github.com:Shougo/neocomplcache'
"Plugin 'git@github.com:osyo-manga/neocomplcache-clang_complete.git' " 解决clang_complete和neocomplcache的冲突


" TagHighlight -- 变量、函数高亮插件
Plugin 'git@github.com:magic-dot-files/TagHighlight.git'

" powerline -- 增强状态栏
Plugin 'git@github.com:Lokaltog/vim-powerline.git'

" jedi-vim --- python补全插件
Plugin 'git@github.com:davidhalter/jedi-vim.git'

" 代码折叠
Plugin 'git@github.com:tmhedberg/SimpylFold.git'

" 代码缩进插件
Plugin 'nathanaelkane/vim-indent-guides'

" 头文件源文件切换插件
Plugin 'derekwyatt/vim-fswitch'

" 内容查找插件
Plugin 'dyng/ctrlsf.vim'
Plugin 'mileszs/ack.vim'
Plugin 'terryma/vim-multiple-cursors'

" 快速注释插件
Plugin 'scrooloose/nerdcommenter'

" 书签功能
Plugin 'git@github.com:kshenoy/vim-signature.git'

"所有的插件必须在下面语句之前
call vundle#end()
filetype plugin indent on	"加载vim自带和插件x相应的语法文件类型相关脚本

" 将制表符扩展为空格
set expandtab
" 设置编辑时制表符占用的空格数
set tabstop=4
" 设置格式化时制表符占用的空格数
set shiftwidth=4
" 连续空格视为一个制表符
set softtabstop=4

" let g:ycm_server_python_interpreter='/usr/local/bin/python'

" ctags configuration
let Tlist_Ctags_Cmd='/usr/local/bin/ctags'
let Tlist_Show_one_file=1	"不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow=1	"如果taglist窗口是最后一个窗口则退出VIM
let Tlist_Use_leff_window=1	"在左侧窗口显示taglist
set tags+=./tags
set tags+=tags;/

" NERDTree configuration
" map <c-n> :NERDTreeToggle<cr>
map <F9> :NERDTreeToggle<cr>
" vim打开时默认打开
"autocmd vimenter * NERDTree
" 让vim打开后光标位于中间窗口，否则会处于nerdtree窗口
"autocmd vimenter * wincmd l
"" 设置NERDTree子窗口位置
let NERDTreeWinPos="right"

" vim-color-solarizedsyntax enbale
syntax enable 
set background=dark
colorscheme solarized

" tagbar configuration
nmap <F10> :TagbarToggle<cr>
" vim打开时最大化
"autocmd vimenter * TagbarToggle
" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_left=1 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1
" 设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_cpp = {
    \ 'kinds' : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0', 
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

" font 
"set guifont=Monaco:h14
"set guifont=Ubuntu\ Mono:h16
set guifont=YaHei\ Consolas\ Hybrid:h16

" ===== Quick Run ===
" 按下F5自动编译运行
map <F5> :call OnekeyRun()<cr>
func! OnekeyRun()
	exec 'w'
	if &filetype == 'c'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'cpp'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'java'
		exec "!java %"
		exec "!time java %<"
	elseif &filetype == 'sh'
		exec "!time bash %"
	elseif &filetype == 'python'
		exec "!time python %"
	elseif &filetype == 'html'
		exec "!chrome % &"
	endif
endfunc
" ===== End

" vim-commentary configuration
autocmd FileType python,shell set commentstring=#\ %s
autocmd FileType java,c,cpp set commentstring=//\ %s

" syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" ultisnips configuration
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" UltiSnips 的 tab 键与 YCM 冲突，重新设定
let g:UltiSnipsExpandTrigger="<C-a>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"let g:UltiSnipsSnippetDirectories=['mysnippets']
let g:UltiSnipsListSnippets="<C-i>"

" ctrlp configuration
"let g:ctrlp_map = '<c-p>'
"let g:ctrlp_cmd = 'CtrlP'
"let g:ctrlp_working_path_mode = 'ra'
"if (isWindowsPC)
"	set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
"	let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows
"else
"	set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
"	let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
"endif
""设置搜索时忽略的文件
"let g:ctrlp_custom_ignore = {
"    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm|eclipse)$',
"    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
"    \ }


" leaderF configuration
map <c-l> :LeaderfSelf<cr>
map <c-p> :LeaderfFile<cr>
let g:Lf_ShortcutF = '<C-P>'
highlight Lf_hl_match gui=bold guifg=Blue cterm=bold ctermfg=21
highlight Lf_hl_matchRefine  gui=bold guifg=Magenta cterm=bold ctermfg=201

" delimitMate configuration
au FileType python let b:delimitMate_nesting_quotes = ['"']

" 列举光标所在单词的列表
" nmap <F2> :lvimgrep /<C-R>=expand("<cword>")/ % | lopen<cr><cr>
" nmap <leader>lv :lv /<c-r>=expand("<cword>")<cr>/ %<cr>:lw<cr>
nmap <F2> :lv /<c-r>=expand("<cword>")<cr>/ %<cr>:lw<cr>


" youcompleteme configuration
" let g:ycm_server_python_interpreter='/usr/bin/python'
" let g:ycm_server_python_interpreter='/usr/local/bin/python'
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
" let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py' 
" YCM 补全菜单配色
" 菜单
highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" 选中项
highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900
" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1
" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_confirm_extra_conf=0
" 开启 YCM 标签补全引擎
let g:ycm_collect_identifiers_from_tags_files=1
" 引入 C++ 标准库tags
set tags+=/data/misc/software/misc./vim/stdcpp.tags
" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
inoremap <leader>; <C-x><C-o>
" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview
" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=1
" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 语法关键字补全			
let g:ycm_seed_identifiers_with_syntax=1
" 设置转到定义处的快捷键为ALT + G，这个功能非常赞  
" nmap <M-g> :YcmCompleter GoToDefinitionElseDeclaration <C-R>=expand("<cword>")<CR><CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

" powerline configuration
let g:Powerline_symbols = 'fancy'
set fileencoding=gb18030
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fillchars+=stl:\ ,stlnc:\
" set -g default-terminal "screen-256color"
set laststatus=2
let g:Powerline_colorscheme='solarized256'

" 代码折叠
let g:SimpylFold_docstring_preview = 0
nnoremap <space> za
" 基于缩进或语法的代码折叠
" set foldmethod=indent
set foldmethod=syntax
" 启动时关闭折叠
set nofoldenable


"代码缩进
au BufNewFile,BufRead *.py
 	\ set tabstop=4
 	\ set softtabstop=4
 	\ set shiftwidth=4
 	\ set textwidth=79
 	\ set expandtab
 	\ set autoindent
 	\ set fileformat=unix

au BufNewFile,BufRead *.js, *.html, *.css
 	\ set tabstop=2
	\ set softtabstop=2
	\ set shiftwidth=2

" scope configuration
" Cscope
if has("cscope")
  " set csprg=/usr/local/bin/cscope
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  endif
  set csverb
endif
" nmap <leader>cs :cs find s <C-R>=expand("<cword>")<cr><cr>
nmap <C-s>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-s>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-s>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-s>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-s>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-s>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-s>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-s>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
:nmap <silent> <Leader>i <Plug>IndentGuidesToggle vim guides 配置

" 在cpp和h文件中切换
nmap <silent> <Leader>sw :FSHere<CR>

" 配置内容查找插件ctrlsf-ack-ag
let g:ctrlsf_ackprg='ag'
nnoremap <Leader>sp :CtrlSF<CR>

" 替换函数。参数说明：
" confirm：是否替换前逐一确认
" wholeword：是否整词匹配
" replace：被替换字符串
function! Replace(confirm, wholeword, replace)
    wa
    let flag = ''
    if a:confirm
        let flag .= 'gec'
    else
        let flag .= 'ge'
    endif
    let search = ''
    if a:wholeword
        let search .= '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
    else
        let search .= expand('<cword>')
    endif
    let replace = escape(a:replace, '/\&~')
    execute 'argdo %s/' . search . '/' . replace . '/' . flag . '| update'
endfunction
" 不确认、非整词
nnoremap <Leader>R :call Replace(0, 0, input('Replace '.expand('<cword>').' with: '))<CR>
" 不确认、整词
nnoremap <Leader>rw :call Replace(0, 1, input('Replace '.expand('<cword>').' with: '))<CR>
" 确认、非整词
nnoremap <Leader>rc :call Replace(1, 0, input('Replace '.expand('<cword>').' with: '))<CR>
" 确认、整词
nnoremap <Leader>rcw :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>
nnoremap <Leader>rwc :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>
